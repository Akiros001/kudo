// Code generated for package crd by go-bindata DO NOT EDIT. (@generated)
// sources:
// config/crds/kudo.dev_instances.yaml
// config/crds/kudo.dev_operators.yaml
// config/crds/kudo.dev_operatorversions.yaml
// config/crds/kudo.dev_teststeps.yaml
// config/crds/kudo.dev_testsuites.yaml
package crd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configCrdsKudoDev_instancesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x3f\x8f\xd4\x30\x10\xc5\x7b\x7f\x8a\xd1\xf5\x1b\x74\xa2\x41\xee\x10\x34\xd7\x1c\x88\x43\xd7\x20\x8a\x59\x7b\x36\x98\x4d\x6c\x6b\x66\xbc\x02\x21\xbe\x3b\xb2\x93\xec\xed\x86\xf0\xe7\xdc\xe5\x67\xbf\xf1\x7b\xe3\x8c\xd9\xed\x76\x06\x73\x78\x24\x96\x90\xa2\x05\xcc\x81\xbe\x29\xc5\xfa\x25\xdd\xf1\x95\x74\x21\xbd\x38\xdd\xee\x49\xf1\xd6\x1c\x43\xf4\x16\xde\x14\xd1\x34\x7e\x20\x49\x85\x1d\xbd\xa5\x43\x88\x41\x43\x8a\x66\x24\x45\x8f\x8a\xd6\x00\x38\x26\xac\xf0\x63\x18\x49\x14\xc7\x6c\x21\x96\x61\x30\x00\x11\x47\xb2\x10\xa2\x28\x46\x47\xd2\x1d\x8b\x4f\x9d\xa7\x93\x91\x4c\xae\x4a\x7b\x4e\x25\x5b\x38\xf3\x49\x22\x75\x0b\x60\xb2\x70\x37\xab\x1b\xca\x43\x61\x1c\x2e\x4a\x36\x2a\x21\xf6\x65\x40\x7e\xe2\x06\x40\x5c\xca\x64\xe1\xbe\xd6\xcb\xe8\xc8\x57\x56\xf6\x3c\x67\x99\xef\x10\x45\x2d\x62\xe1\xc7\x4f\x03\x70\xc2\x21\xf8\x16\x65\xda\x4c\x99\xe2\xeb\xf7\x77\x8f\x2f\x1f\xdc\x17\x1a\x71\x82\x00\x99\x53\x26\xd6\xb0\xd4\xa8\xeb\xa2\xaf\x67\x06\xa0\xdf\xab\x05\x51\x0e\xb1\x3f\xe3\x16\xeb\x5f\x87\x2e\xfb\x7b\x7d\x30\xed\xbf\x92\xd3\x33\x5e\x3a\xb9\xac\x2d\x73\x73\x16\x46\x4d\xbc\xe1\xb2\x2e\x4f\xe2\x38\xe4\x96\x1d\xde\x5d\x9f\x6d\x77\x84\x43\x20\x01\x04\xa6\x03\x31\x45\x47\xa0\x09\x70\xd9\x72\x6b\xcd\xaa\x3c\xcc\xb6\xbb\x15\xdf\x8c\xd4\x62\x20\xe3\x48\x4a\x2c\x6b\xa7\x7f\x90\x6c\x37\x67\x7a\xdd\xff\x68\x0f\xf6\x3d\x53\x8f\x4a\xfe\xe1\x37\xcd\xdf\x8d\x0e\x18\x9f\x25\xd9\xc0\x2b\x74\x5a\x06\x74\x99\xc5\xa7\x18\xe8\x1c\x65\x25\x7f\xbf\x9e\x92\x9b\x9b\xab\xf9\x68\x9f\x2e\x45\xdf\xa6\x55\x2c\x7c\xfa\x5c\x7f\x7f\x4d\x4c\x7e\x7e\xa1\x09\xfe\x0a\x00\x00\xff\xff\x42\x67\x9c\xa1\x15\x04\x00\x00")

func configCrdsKudoDev_instancesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdsKudoDev_instancesYaml,
		"config/crds/kudo.dev_instances.yaml",
	)
}

func configCrdsKudoDev_instancesYaml() (*asset, error) {
	bytes, err := configCrdsKudoDev_instancesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/kudo.dev_instances.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsKudoDev_operatorsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcf\x8e\x13\x31\x0c\xc6\xef\x79\x0a\x6b\xef\x2d\x5a\x71\x41\x73\x43\x70\xe1\xb2\x20\x40\x7b\x41\x1c\xdc\xc4\x14\xd3\xc9\x1f\xd9\x4e\xc5\xbe\x3d\x4a\x66\xa7\xdb\x76\xa7\x54\xf5\x2d\x3f\xe7\x73\xbe\xc4\xb1\x5b\xad\x56\x0e\x0b\x3f\x92\x28\xe7\x34\x00\x16\xa6\xbf\x46\xa9\xad\x74\xbd\x7b\xa7\x6b\xce\x6f\xf6\xf7\x1b\x32\xbc\x77\x3b\x4e\x61\x80\x0f\x55\x2d\xc7\xaf\xa4\xb9\x8a\xa7\x8f\xf4\x8b\x13\x1b\xe7\xe4\x22\x19\x06\x34\x1c\x1c\x80\x17\xc2\x06\xbf\x73\x24\x35\x8c\x65\x80\x54\xc7\xd1\x01\x24\x8c\x34\x40\x2e\x24\x68\x59\x74\xbd\xab\x21\xaf\x03\xed\x9d\x16\xf2\x4d\xba\x95\x5c\xcb\x00\x07\x3e\x49\xb4\xa5\x00\x26\x0b\x9f\x9f\xd5\x1d\x95\xb1\x0a\x8e\x47\x25\x3b\x55\x4e\xdb\x3a\xa2\xbc\x70\x07\xa0\x3e\x17\x1a\xe0\xa1\xd5\x2b\xe8\x29\x38\x80\x3d\x8e\x1c\xba\xd7\xe9\x84\x5c\x28\xbd\xff\xf2\xe9\xf1\xed\x37\xff\x9b\x22\x4e\x10\xa0\x48\xab\x63\x3c\x1b\x69\x71\xf4\x70\x07\x06\x60\x4f\xed\x0c\x35\xe1\xb4\x3d\xe0\xee\xfb\xda\xa6\xe3\x07\x3c\xdd\x98\x37\x7f\xc8\xdb\x01\xcf\x4f\x35\xc7\x92\xb9\x16\x81\xd4\x0b\x17\x3b\x73\x78\xd1\x40\x77\x5a\x37\x24\x89\x8c\x74\xe1\x6e\x57\x94\x21\xdf\xaa\x89\xc8\xc9\x90\x13\x89\x9e\x6b\xd8\x28\xbe\x82\x97\xef\x3a\x05\x45\xe4\x71\x29\xf1\x1f\x0f\x53\xf4\x7f\x79\xbb\x70\xb1\x3f\xc7\x29\x14\xc1\xa7\x93\x4c\x95\x57\x0e\x2f\x1c\xb1\xdc\x7c\x43\xab\x7a\xe5\x8f\x9c\xa1\xfd\x3c\xdf\xf3\x28\xbf\x14\x41\xef\xa9\x18\x85\x87\xf3\x21\xbb\xbb\x3b\x19\xaf\xbe\xf4\x39\x85\x3e\xec\x3a\xc0\x8f\x9f\x6d\xa2\x2c\x0b\x85\xe7\xae\x4f\xf0\x5f\x00\x00\x00\xff\xff\x5f\x7d\xe3\xd3\x54\x04\x00\x00")

func configCrdsKudoDev_operatorsYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdsKudoDev_operatorsYaml,
		"config/crds/kudo.dev_operators.yaml",
	)
}

func configCrdsKudoDev_operatorsYaml() (*asset, error) {
	bytes, err := configCrdsKudoDev_operatorsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/kudo.dev_operators.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsKudoDev_operatorversionsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4d\x6f\x1b\x37\x13\xbe\xeb\x57\x0c\x7c\x79\x2f\xb1\x5e\x04\xbd\x14\xba\x05\x0e\x0a\x18\x48\x1d\x23\xb1\x03\x14\x6d\x01\x8d\xc8\x59\xed\x54\x5c\x92\x25\xb9\x92\x85\x20\xff\xbd\x18\x52\xbb\x92\x56\x2b\x5b\x55\x75\xd2\x0e\x87\xf3\xf1\xcc\x33\x43\x72\x72\x7b\x7b\x3b\x41\xcf\xdf\x28\x44\x76\x76\x06\xe8\x99\x5e\x12\x59\xf9\x8a\xd3\xd5\xcf\x71\xca\xee\xff\xeb\xf7\x0b\x4a\xf8\x7e\xb2\x62\xab\x67\x70\xd7\xc6\xe4\x9a\x2f\x14\x5d\x1b\x14\x7d\xa4\x8a\x2d\x27\x76\x76\xd2\x50\x42\x8d\x09\x67\x13\x00\x15\x08\x45\xf8\xc4\x0d\xc5\x84\x8d\x9f\x81\x6d\x8d\x99\x00\x58\x6c\x68\x06\xce\x53\xc0\xe4\xc2\xba\x38\x8e\xd3\x55\xab\xdd\x54\xd3\x7a\x12\x3d\x29\xb1\xb0\x0c\xae\xf5\x33\xe8\xe5\x65\x67\x94\x25\x80\x12\xc9\xe7\x9d\x91\x5d\xf4\x79\xc5\x9b\x36\xa0\x39\x75\x90\x17\x23\xdb\x65\x6b\x30\x9c\x2c\x4f\x00\xa2\x72\x9e\x66\xf0\x20\x4e\x3c\x2a\xd2\x13\x80\x35\x1a\xd6\x39\x8f\xe2\xd6\x79\xb2\x1f\x1e\xef\xbf\xfd\xf4\x55\xd5\xd4\x60\x11\x02\xf8\x20\xe6\x12\x77\xd1\xc9\xef\x00\xd4\x5e\x06\x90\xb6\xe2\x23\xa6\xc0\x76\xd9\x8b\x73\x32\x6f\x29\x1d\x82\x7b\xac\xe8\x16\x7f\x91\x4a\xbd\xb8\xc3\xaf\xfb\x8d\x05\x57\x02\xf4\x23\x01\x9e\xf5\x2f\x3f\xe5\xac\x25\x25\x70\x7c\xcd\x8b\xc3\x8d\x9a\xa2\x0a\xec\x33\x5e\x70\x37\x50\x06\x2d\x4c\xa1\x08\x08\x89\x1a\x6f\x30\x91\xde\x39\x81\x54\x63\x02\x85\x16\x16\x34\x30\x09\xd0\x46\xd2\x90\x5c\xe7\x5c\xfe\xa2\x05\xb6\x31\xa1\x55\x04\xae\x82\x54\x53\x4f\x85\xe9\xa5\xb9\x74\x04\x18\x4f\x7e\x80\x69\xc6\x11\x03\x36\x94\x28\xc4\xe1\x16\x4e\xd4\x9c\x08\xcf\x03\xdf\x61\x55\x61\x6b\xd2\xd8\xd2\x00\xc8\x8f\x45\x13\x58\xa0\xdb\x6d\x13\x66\xb6\x04\x5c\x81\x75\xfb\xc8\x44\xc5\x07\xb7\x66\x9d\xd9\x3b\xf6\x5b\x6c\x33\x5c\x1d\x7c\x43\xb8\xde\x00\xed\x34\xba\x4b\xc2\xef\x3f\x40\xa1\x4f\x6d\xc8\x1c\x30\xce\x2e\x29\x1c\xaa\x4a\x29\x6b\xb7\x39\x13\xb8\x44\xbd\x4f\x74\xc3\xc6\xc0\x82\x32\x39\xae\xcb\x81\xa3\x37\xb8\x95\x6e\xbf\x24\x87\xbd\xf6\x8e\xa6\x85\x96\x8b\x2d\x3c\xdf\xc7\xab\x02\xb0\x97\x79\xbe\xc9\x3e\x39\xe6\xfc\x0f\xbb\x25\xd6\xae\x35\xba\x8f\x84\x6d\xd6\xe8\x3a\xeb\x0c\x88\x15\x1b\x82\xca\x05\xa0\x17\x6c\xbc\xa1\x77\xc2\xa0\x79\x99\xc8\x77\x9f\x9f\x1f\x9e\xe6\x62\xc5\x42\x1b\x8b\x1f\x82\x35\x06\xc6\x85\x11\xc6\x9c\xb1\x89\x79\xe2\x80\xe1\x15\xcd\xe0\x0f\x5b\xe6\x0f\x00\x04\xf2\x86\x15\xc6\x19\xc0\xf7\xef\x30\x7d\x94\xda\xc5\x69\xf6\x02\x3f\x7e\xdc\x5c\x83\x59\xa0\xbf\x5b\x0e\xa4\x2f\xc0\xed\xcb\x4e\x35\x87\xc3\x15\x53\x94\x54\x8f\x49\xc4\xb1\xb7\x08\xc9\x9d\x6b\x18\xea\x5b\x4a\xca\x8d\xc6\xf4\xcd\x13\xdf\x81\x0b\xb0\xa9\x29\xd5\x14\x0e\x7a\x53\x18\x12\xdb\xaa\xe2\xd7\xfb\x6b\xe1\x9c\x21\x1c\x83\x35\x05\x5e\x2e\xe9\x64\x34\x8d\xa4\xf9\x54\x34\x81\x35\xd9\x54\xd2\xcc\x39\x1a\xb4\x85\x26\x4b\x4a\x11\xe8\x85\x54\x2b\xe3\x76\x53\xd3\xb9\x32\xa6\x5a\x86\x47\x8f\x8d\xaa\xd1\x2e\x05\xb4\xc2\xab\xfb\x7e\xdc\xe6\xc1\x38\x3d\x1c\x4a\xf3\xd6\x6b\x4c\x34\x3f\x63\x98\x2b\xc0\x12\xd0\x86\x53\x5d\xa2\x12\xc6\x01\xbd\x70\x4c\x82\xa1\xc0\xb7\xe1\x48\xc0\xe9\x7f\x11\xe6\x9a\xbc\x71\xdb\xf9\x15\x5d\x75\x76\x76\x77\x4b\x18\x02\x6e\x8f\xa7\xba\x41\x7b\x32\x9f\x8f\x20\x7e\x14\x0d\x68\xd0\xc7\x2e\x8f\x1c\xbd\x1c\x43\xf9\x73\xfc\xc4\x19\x09\x22\x61\x5c\xbd\xee\xea\x13\xc7\x24\x53\x50\x48\x96\xb5\x01\xd7\xc8\x66\xd7\x7f\xa5\x44\x83\x3b\xcf\xd0\xfb\x55\x67\xd1\xf0\x02\x32\x4c\xe6\x8a\x21\xf6\xc6\xc6\xe1\x25\x65\xb8\x71\xb4\x86\x57\x15\xb8\x9b\x88\xaf\x23\xff\xd4\x69\x95\x53\xd6\xec\x0a\x11\xa8\xa2\x40\xd2\xea\x52\xef\xdf\x3e\xfc\xfa\x69\x6f\x0f\x8c\x53\x72\x87\x39\x09\x72\x30\x8a\x23\x54\xce\x68\x19\x10\x56\x83\x08\xc2\xde\xac\x86\x2a\xb8\xa6\xd4\xfa\x62\x1e\xb5\x7e\x19\x50\x0b\x29\x7e\x09\xae\x79\x35\xad\xe7\x23\xd5\x9c\x56\xcc\xec\x1a\xb0\x28\xee\x6f\x60\xc5\xfa\xe9\x01\x92\xdc\x7f\xe1\xdf\x15\x85\x5b\xff\xab\xcb\xe9\xf8\x55\x38\x61\x6a\xe3\x1b\x37\xe6\x81\xa8\x73\x0b\xdd\xa3\x67\x6f\x04\x95\x22\x9f\x48\x3f\x0c\xdf\x21\x37\x37\x47\x4f\x8f\xfc\xa9\x9c\xd5\xf9\x59\x14\x67\xf0\xfb\x9f\xf2\xbe\x48\x2e\x90\xee\x00\xcf\xc2\x7f\x02\x00\x00\xff\xff\x6a\xcf\xfa\x2e\x7e\x0d\x00\x00")

func configCrdsKudoDev_operatorversionsYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdsKudoDev_operatorversionsYaml,
		"config/crds/kudo.dev_operatorversions.yaml",
	)
}

func configCrdsKudoDev_operatorversionsYaml() (*asset, error) {
	bytes, err := configCrdsKudoDev_operatorversionsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/kudo.dev_operatorversions.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsKudoDev_teststepsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x41\x6f\x1b\xb9\x0e\xbe\xfb\x57\x10\xee\x21\x2d\x10\x8f\x5f\xfb\x1e\x1e\x1e\xe6\x56\xa4\x6f\x17\xd9\x62\x93\xa2\xc9\xf6\x52\xf4\x40\x4b\xb4\x47\x6b\x8d\x34\x2b\x51\x76\xbc\x8b\xfd\xef\x0b\x4a\x33\x8e\x1d\x4f\x9a\x06\x28\x9a\x4b\x6b\x8d\x44\x7e\x24\x3f\x51\x1f\x27\xb3\xd9\x6c\x82\x9d\xf9\x44\x21\x1a\xef\x6a\xc0\xce\xd0\x1d\x93\x93\x5f\xb1\x5a\xff\x2f\x56\xc6\xcf\x37\xaf\x17\xc4\xf8\x7a\xb2\x36\x4e\xd7\x70\x91\x22\xfb\xf6\x23\x45\x9f\x82\xa2\x77\xb4\x34\xce\xb0\xf1\x6e\xd2\x12\xa3\x46\xc6\x7a\x02\xa0\x02\xa1\x2c\xde\x9a\x96\x22\x63\xdb\xd5\xe0\x92\xb5\x13\x00\x8b\x0b\xb2\x51\xf6\x00\x28\xef\x38\x78\x6b\x29\xcc\xd8\x7b\x3b\x38\xac\x61\xfa\xba\xfa\xd7\x74\x02\xe0\xb0\xa5\x1a\x98\x22\x47\xa6\x2e\x56\xeb\xa4\x7d\xa5\x69\x33\x89\x1d\x29\xb1\xb1\x0a\x3e\x75\x35\xec\xd7\xcb\x91\xde\x7c\xc1\x7b\x4b\x91\x6f\x98\xba\xbc\xd4\xd9\x14\xd0\x1e\x98\x9c\x00\x44\xe5\x3b\xaa\xe1\x4a\x0e\x76\xa8\x48\x4f\x00\x36\x68\x8d\xce\x11\x14\x53\xbe\x23\xf7\xf6\xc3\xe5\xa7\x7f\xdf\xa8\x86\x5a\x2c\x8b\x00\x5d\xf0\x1d\x05\x36\x83\x47\xf9\x3b\x48\xe7\x7e\x0d\x40\x53\x54\xc1\x74\xd9\x22\x9c\x89\xa9\xb2\x07\xb4\x24\x90\x22\x70\x43\xb0\x29\x6b\xa4\x21\x66\x37\xe0\x97\xc0\x8d\x89\x10\xa8\x0b\x14\xc9\x71\x86\x74\x60\x16\x64\x0b\x3a\xf0\x8b\xdf\x49\x71\x05\x37\x14\xc4\x08\xc4\xc6\x27\xab\x25\xc1\x1b\x0a\x0c\x81\x94\x5f\x39\xf3\xe7\xde\x72\x04\xf6\xd9\xa5\x45\x49\xc5\x91\x45\xe3\x98\x82\x43\x2b\x49\x48\x74\x0e\xe8\x34\xb4\xb8\x83\x40\xe2\x03\x92\x3b\xb0\x96\xb7\xc4\x0a\x7e\xf5\x81\xc0\xb8\xa5\xaf\xa1\x61\xee\x62\x3d\x9f\xaf\x0c\x0f\x04\x52\xbe\x6d\x93\x33\xbc\x9b\xe7\x8a\x9b\x45\x62\x1f\xe2\x5c\xd3\x86\xec\x1c\x3b\x33\xcb\x38\x1d\x67\xd2\xb5\xfa\x45\xe8\xc9\x15\xcf\x0e\x80\xf1\x4e\xaa\x14\x39\x18\xb7\x9a\xdc\xa7\xd5\x12\xd3\xa3\x89\xbe\xce\x69\xc9\xc1\x96\x9d\x80\x9c\xc3\x5e\xd0\xca\x38\x67\xdc\xaa\xa4\x98\x32\x21\x40\x18\x51\x1d\xd8\x32\x4c\x6d\xac\x8f\x92\x33\x56\xf1\xaf\xd5\x7d\x04\xd4\xdb\x0f\x97\x43\xa5\x07\xef\x81\x96\x14\xc8\x71\x75\x72\x72\x34\xea\xf2\xb7\x34\x64\xf5\x07\xe4\xe6\x09\x7f\x67\x97\xcb\xe2\x40\x6c\x48\x2a\x10\x3a\x43\x8a\x8e\xa8\x03\xc6\x45\x26\xd4\xfd\xa2\x14\x23\xd0\x89\x5d\xe8\x77\x9f\x17\x5a\x16\x58\x07\x64\x63\x34\x0e\xb0\xdc\x1e\xf8\xe5\xe6\xfa\x6a\xfe\xb3\x2f\x38\x01\x95\xa2\x18\x47\x2c\x46\x46\xa6\x96\x1c\x9f\x43\x4c\xaa\x01\x8c\x02\xdf\x04\xd2\x37\xf2\xa5\x6a\xd1\x99\x25\x45\xae\x7a\xfb\x14\xe2\xe7\x37\x5f\x2a\xf8\xc9\x07\xa0\x3b\x6c\x3b\x4b\xe7\x23\x66\x4d\xc9\x6c\x1f\x5d\x9f\x60\x45\x60\x62\x49\xc1\xde\x1a\x6c\x0d\x37\x19\x76\xe7\x75\x1f\xd8\x56\x02\x1a\x31\xca\xb8\x26\xf0\x7d\x88\x89\xc0\x9a\x35\xd5\x30\x95\x6e\x74\x00\xef\x2f\xe9\x41\x7f\x4f\xe1\xe5\xb6\xa1\x40\x30\x95\x9f\xd3\x02\x61\x2c\x01\xfd\x4d\x94\x5d\x03\x1f\xee\xc1\x71\x23\x8c\x0d\x66\xb5\xa2\x40\x3a\x7f\x24\xb9\x2a\xaf\xc0\x07\x89\xd1\xf9\x11\x8b\xf7\xc7\xb3\x51\xa9\x54\x47\xca\x2c\x0d\xe9\x13\xb0\x9f\xdf\x7c\x99\xc2\xcb\xe3\x6c\x8c\xa5\xd3\x69\xba\x83\x37\x60\x5c\xc9\x50\xe7\xf5\xab\x0a\x6e\x33\x0b\x76\x8e\xf1\x4e\xbc\xa8\xc6\x47\x72\xe0\x9d\xdd\x49\x54\x0d\x6e\x08\xa2\x6f\x09\xb6\x64\xed\xac\x74\xba\xb1\xb4\x6e\x71\x27\x91\x0f\x45\x12\x4e\x21\x74\x18\xf8\x41\x77\xbb\xbd\x7e\x77\x5d\x17\xff\x42\x91\x95\x13\xa7\xce\xf3\x88\xc9\xa5\x91\x0e\x26\xad\x2b\x6f\x2f\x1c\x14\xb0\xa9\x10\x82\x3d\xa8\x06\xdd\x8a\x4a\x44\x04\xcb\xc4\x29\x50\x75\xf6\x9c\x1b\x98\x1f\x98\x27\x2e\xdf\x7b\xe3\xf4\xc9\x35\xff\xce\xfd\x52\x20\xc6\x99\xa0\x89\xcf\xc2\x9f\x9f\xd7\x27\xf0\x5f\x1d\xd0\xf2\xab\xf8\xd7\x69\x41\xc1\x11\x53\x0e\x41\x7b\x15\x05\xbd\xa2\x8e\xe3\xdc\x6f\x28\x6c\x0c\x6d\xe7\x5b\x1f\xd6\xc6\xad\x66\xc2\xb2\x59\x29\x6b\x9c\xe7\x27\x7b\xfe\x22\xff\xf3\x6c\xfc\xf9\xc9\xfe\x96\x20\xf2\xc6\x1f\x11\x89\xf8\x89\xf3\x67\x05\x32\x3c\x78\xdf\xf6\x80\x9c\xdd\x94\xdb\xac\x1e\x9e\x13\x56\x6f\x1b\xa3\x9a\x41\x35\xdc\x37\xbd\x91\x2b\xd2\xa2\xa6\x73\xe9\x21\xe8\x76\xdf\x9b\x91\x92\xaf\x14\xc4\xf9\x6e\xd6\xab\xbc\x19\x3a\x2d\xff\x8f\x26\xb2\xac\x3f\x2b\x41\xc9\x3c\x79\xd1\x7e\xbb\x7c\xf7\x63\x78\x9a\xcc\xb3\xae\x59\xf9\x50\x6c\x9c\xc8\x19\x0c\x01\x77\xfb\xd5\xdc\x64\x0f\xe3\x5c\xfa\xd0\x22\xd7\x22\xc9\xfe\xfb\x9f\x93\xc3\x22\xd4\x56\x14\xf6\xeb\x0f\xdb\xd1\x48\x23\x32\x11\x70\x78\xb6\xcb\x13\xb6\x97\x96\x59\x1c\x34\x04\x1f\xff\x7f\x73\xbb\x27\x56\x26\xd2\xb1\xde\x1c\x1e\xd4\xfe\x58\xbc\x17\x9d\x22\x12\x8d\x5b\xe6\x57\x4b\x7a\x6e\xf0\x6d\x79\xb0\x9c\xee\xbc\x71\x45\x79\x29\x6b\xc8\x1d\x77\xec\x98\x16\xad\x61\xe1\xeb\x1f\x49\x74\x39\xb0\xaf\xe0\x02\x9d\xf3\x0c\x0b\x82\xd4\x69\x64\xd2\x15\x5c\x3a\xb8\xc0\x96\xec\x05\x46\xfa\x41\x2d\x74\xb4\xaa\xc2\x20\xc5\xf6\xd1\x54\xbf\x2f\xdf\x41\x30\xa0\xd3\x59\x70\x84\xe4\x06\xed\x19\xb9\x7f\xd9\x06\xdd\xf9\x75\xc5\xf9\x08\xb1\xc6\xf8\x73\x38\x81\x8d\x22\xbb\xde\x88\x0a\xd4\x94\x5d\x6b\x5a\x62\xb2\xbc\x3f\x25\x85\xe4\x7e\x3e\x13\x75\xe1\x0f\x37\x9f\x4c\x09\xa2\x95\x73\x03\xae\x4e\x40\x3d\xe0\xba\x94\x41\x86\xb0\x47\x51\x5d\x3a\x6d\x94\xcc\x21\xbd\xda\x11\xf2\x64\xa2\xca\xc9\xa2\xcc\x67\x10\x71\x49\x43\x22\xe5\x56\xfa\xc4\x80\x47\x88\x02\xa1\xcd\xb9\x2f\xb7\x1b\x94\x4d\x91\x29\x9c\xe2\x5b\x78\x6f\x09\x87\x31\x4a\x58\x27\x6a\x73\x80\x37\x1b\xea\xbb\xff\x3d\x04\x20\x73\xe1\x30\x28\x0f\x33\xb1\xa8\xd7\x94\x2b\x26\x02\xb7\x63\xd2\x57\x0f\x07\xd0\xe9\xf4\x68\xf4\xcc\x3f\x95\x77\x3a\x4f\xcd\xb1\x86\xcf\x5f\x64\x08\x65\x1f\x48\xf7\x7d\xbc\x2c\xfe\x13\x00\x00\xff\xff\x9b\xd9\xe2\xcc\x9d\x0f\x00\x00")

func configCrdsKudoDev_teststepsYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdsKudoDev_teststepsYaml,
		"config/crds/kudo.dev_teststeps.yaml",
	)
}

func configCrdsKudoDev_teststepsYaml() (*asset, error) {
	bytes, err := configCrdsKudoDev_teststepsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/kudo.dev_teststeps.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configCrdsKudoDev_testsuitesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8f\x1b\x37\x0c\xbd\xfb\x57\x10\xdb\x43\x36\x40\xec\x4d\x90\xa2\x08\xe6\x16\xd8\x3d\x2c\x82\x66\x17\xd9\x4d\x7a\x28\x7a\x90\x25\x8e\xcd\xae\x46\x9a\x52\x94\x9b\xed\xaf\x2f\xa8\xf1\x8c\x3d\xfe\xc8\x26\x69\x7c\xf2\x70\x24\xf2\xe9\xf1\x91\x1c\x4d\xa6\xd3\xe9\xc4\xb4\xf4\x09\x39\x51\x0c\x15\x98\x96\xf0\xb3\x60\xd0\xa7\x34\x7b\x78\x93\x66\x14\xaf\x36\xaf\x96\x28\xe6\xd5\xe4\x81\x82\xab\x60\x9e\x93\xc4\xe6\x03\xa6\x98\xd9\xe2\x02\x6b\x0a\x24\x14\xc3\xa4\x41\x31\xce\x88\xa9\x26\x00\x96\xd1\xa8\xf1\x9e\x1a\x4c\x62\x9a\xb6\x82\x90\xbd\x9f\x00\x78\xb3\x44\x9f\x74\x0d\x80\x8d\x41\x38\x7a\x8f\x3c\x95\x18\x7d\x1f\xb0\x82\x8b\x57\xb3\x97\x17\x13\x80\x60\x1a\xac\x40\x30\x49\xca\x24\x98\x66\x0f\xd9\xc5\x99\xc3\xcd\x24\xb5\x68\xd5\xc9\x8a\x63\x6e\x2b\x18\xec\xdd\x9e\xad\xff\x0e\xf0\x3d\x26\xb9\xd3\xed\xc5\xd6\xfa\xcc\xc6\xef\x3b\x9d\x00\x24\x1b\x5b\xac\xe0\xbd\x6e\x6d\x8d\x45\x37\x01\xd8\x18\x4f\xae\x1c\xa2\x73\x16\x5b\x0c\x6f\x6f\xaf\x3f\xbd\xbe\xb3\x6b\x6c\x4c\x67\x04\x68\x39\xb6\xc8\x42\x7d\x4c\xfd\xed\x31\x3a\xd8\x00\x1c\x26\xcb\xd4\x16\x8f\xf0\x4c\x5d\x75\x6b\xc0\x29\x87\x98\x40\xd6\x08\x9b\xce\x86\x0e\x52\x09\x03\xb1\x06\x59\x53\x02\xc6\x96\x31\x61\x90\x02\x69\xcf\x2d\xe8\x12\x13\x20\x2e\xff\x42\x2b\x33\xb8\x43\x56\x27\x90\xd6\x31\x7b\xa7\x1c\x6f\x90\x05\x18\x6d\x5c\x05\xfa\x77\xf0\x9c\x40\x62\x09\xe9\x8d\x72\x31\xf2\x48\x41\x90\x83\xf1\x4a\x42\xc6\x17\x60\x82\x83\xc6\x3c\x02\xa3\xc6\x80\x1c\xf6\xbc\x95\x25\x69\x06\xbf\x45\x46\xa0\x50\xc7\x0a\xd6\x22\x6d\xaa\xae\xae\x56\x24\xbd\x86\x6c\x6c\x9a\x1c\x48\x1e\xaf\x4a\xd2\x69\x99\x25\x72\xba\x72\xb8\x41\x7f\x65\x5a\x9a\x16\x9c\x41\x8a\xee\x1a\xf7\x13\x6f\xf5\x95\x9e\xed\x01\x93\x47\xcd\x52\x12\xa6\xb0\xda\x91\xcd\x42\xb5\xb1\x92\x16\xc4\x67\xe9\xbe\x5f\x23\x38\x62\xb4\x12\xf9\x51\x0f\x1e\xb3\xb4\x59\x76\x9b\xd5\x76\x69\x33\x33\x06\x81\x7f\x22\x3f\x50\x58\xed\x76\x8c\xc9\xa9\x21\x44\x01\x55\x20\xd5\x84\xee\xf9\xec\x29\x88\x96\xdd\x97\xc0\xdd\x1a\x59\x6b\xfc\xf9\x87\x45\xc1\x41\x21\x89\xf1\x1e\x96\x58\x2b\xa7\x9c\x43\x50\x34\x45\xb1\x4f\xc6\x2a\x9a\x3f\xab\xba\x77\x14\x1c\x50\x02\xb3\xdd\xd6\x65\x6f\x27\xae\x12\x67\x8d\xf0\xe1\xd7\xbb\x7b\xe8\x73\x50\x04\x38\x56\x5c\xd1\xda\x6e\x5b\xda\xc9\x4e\x65\x42\xa1\x46\xee\x64\x5b\x73\x6c\x8a\x47\x0c\xae\x8d\x14\xa4\x3c\x58\x4f\x18\xc6\x92\x4b\x79\xd9\x90\xa8\xce\xff\xce\x7a\x50\x90\x38\x83\xb9\x09\x4a\xf5\x12\x21\xb7\xce\x08\xba\x19\x5c\x07\x98\x9b\x06\xfd\xdc\x24\xfc\xd1\xa2\x53\x42\xd3\x54\x19\x7c\x5a\x76\xba\x6a\x1e\x43\x4d\xab\x27\xf3\xaa\x27\x7e\x77\xfd\x7e\xa1\xb5\x58\xd3\x2a\x73\x29\x61\xa8\xc9\xa3\xbe\xce\x09\xbf\x2a\xab\xf3\x18\x04\x3f\xcb\xd9\x70\x7d\x08\x5d\xf4\xd5\x7e\xf3\x12\xad\xf8\xf3\x3e\xbb\xf7\xa0\x4c\x9a\xe0\x8a\x3c\x39\x87\x43\x69\x9a\xf0\x78\x2c\x4f\x12\x6c\x52\x35\x4a\xf2\x49\x0c\xbd\xd9\x30\x9b\x5d\xa5\x35\x26\x50\x8d\x49\x16\xc4\xe9\x8b\x0c\x17\x4c\x7d\xa5\x12\xa6\x42\x81\xa1\x82\xab\x77\x72\xa2\xac\x46\xb8\xce\x96\xd8\xff\x3c\xc3\xde\x44\x3c\x89\xff\x0e\x65\x3b\x10\x21\x72\xd1\x89\x22\x80\x32\x97\xca\x20\x3b\x4e\x60\x57\x7a\x83\xb9\x35\x6c\xbc\xc7\xf3\x19\x7c\xa6\xad\xaf\x31\x9f\xa9\xc9\x0d\x84\xdc\x2c\x91\xcb\x4c\xe9\x59\xd1\x6c\x1a\x81\x18\x2c\xc2\xa5\xc3\xda\x64\x2f\x15\xbc\x79\x3e\xdb\xaf\x80\x3a\x72\x63\xa4\xd2\xb9\xf0\xcb\xcf\x47\x90\x74\x5a\xac\x90\x07\x7b\x7a\xa0\x76\xee\x73\x12\xe4\x05\x7a\x14\x3c\x0b\xee\xba\x86\x84\xf2\x02\x5c\x2c\x2d\xd5\x95\xd5\x85\x87\x26\xda\x07\x74\xfd\x17\x02\xb4\xde\x04\x54\x8e\xb4\x10\xc0\x76\xce\x8f\xc9\x59\xc6\xe8\xd1\x84\x11\x92\xef\x86\x30\x8c\x20\x30\xb5\x20\xef\x44\xb2\x4d\xd3\xb8\x25\x5e\x52\xd3\x7a\x95\xdf\xdd\xe1\xe9\x4f\xcc\x87\x23\x9c\x62\x58\xe6\xdd\x59\x6f\xf5\xa8\x67\xe1\xfe\xbe\x46\x59\x6b\x0a\xb9\xc0\x95\xd8\xed\x05\x03\x3e\x5a\xe3\x01\xc5\xba\x32\xae\xb5\xb2\x39\xa0\x60\x82\xb7\xb7\xd7\x90\x4a\x7b\x1e\x21\xae\xf7\x24\x77\x62\xae\x9c\xc4\xa8\x3d\xe6\xbb\xb1\xed\xe7\xee\xfb\xa2\x7f\x5c\xdc\x7c\x73\xf4\xd2\x7d\x3f\x2e\x6e\xf6\xbe\x36\xbf\x35\xb8\x3c\xd5\x87\x16\xa7\xdb\x4f\x29\x66\x6b\x12\xf6\x95\xf6\xe3\x5a\x8b\x50\x83\x31\x9f\x1f\x06\x37\x1b\x64\x26\xd7\x29\x79\x5b\xd6\xfd\x26\xad\xff\xd7\x2f\x21\xa1\x8d\xda\xd2\x2f\x29\xf4\xff\x47\x52\xfd\x96\xa2\xd7\xa9\x4d\x8c\xc3\x97\xc7\x74\xf4\x59\x36\x18\xbb\x0f\xa1\xe1\x71\x37\x43\x0f\x4d\x3a\xc3\x76\xb6\x6e\x08\x0d\xcf\xfb\xa3\x61\x30\xf6\x8d\x70\x30\x1c\x75\xa1\xd1\x9b\x43\xd3\x61\x01\x8e\xdf\xa8\xec\x0f\x2c\x1f\x17\x37\x83\x45\x0e\xc1\x6c\x89\xd6\x5b\x44\x7f\xb3\xea\x2f\x51\x49\x8c\xe4\x92\x77\x63\x2d\xb6\x82\xee\xfd\xe1\x85\xe5\xe2\x62\x74\x53\x29\x8f\x9a\x9e\x72\xcd\x4a\x15\xfc\xf1\xa7\x5e\x59\x24\x32\xba\xed\x15\xa2\x33\xfe\x17\x00\x00\xff\xff\xe5\xa8\x68\x58\xce\x0d\x00\x00")

func configCrdsKudoDev_testsuitesYamlBytes() ([]byte, error) {
	return bindataRead(
		_configCrdsKudoDev_testsuitesYaml,
		"config/crds/kudo.dev_testsuites.yaml",
	)
}

func configCrdsKudoDev_testsuitesYaml() (*asset, error) {
	bytes, err := configCrdsKudoDev_testsuitesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/crds/kudo.dev_testsuites.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/crds/kudo.dev_instances.yaml":        configCrdsKudoDev_instancesYaml,
	"config/crds/kudo.dev_operators.yaml":        configCrdsKudoDev_operatorsYaml,
	"config/crds/kudo.dev_operatorversions.yaml": configCrdsKudoDev_operatorversionsYaml,
	"config/crds/kudo.dev_teststeps.yaml":        configCrdsKudoDev_teststepsYaml,
	"config/crds/kudo.dev_testsuites.yaml":       configCrdsKudoDev_testsuitesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"crds": &bintree{nil, map[string]*bintree{
			"kudo.dev_instances.yaml":        &bintree{configCrdsKudoDev_instancesYaml, map[string]*bintree{}},
			"kudo.dev_operators.yaml":        &bintree{configCrdsKudoDev_operatorsYaml, map[string]*bintree{}},
			"kudo.dev_operatorversions.yaml": &bintree{configCrdsKudoDev_operatorversionsYaml, map[string]*bintree{}},
			"kudo.dev_teststeps.yaml":        &bintree{configCrdsKudoDev_teststepsYaml, map[string]*bintree{}},
			"kudo.dev_testsuites.yaml":       &bintree{configCrdsKudoDev_testsuitesYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
