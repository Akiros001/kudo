/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package kudo

import (
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)

// Ensure conversion.Hub is implemented
var _ conversion.Hub = &OperatorVersion{}
var _ conversion.Hub = &OperatorVersionList{}

// OperatorVersion is the Schema for the operatorversions API.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type OperatorVersion struct {
	metav1.TypeMeta
	metav1.ObjectMeta

	Spec   OperatorVersionSpec
	Status OperatorVersionStatus
}

func (in *OperatorVersion) Hub() {}

// OperatorVersionList contains a list of OperatorVersion.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type OperatorVersionList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []OperatorVersion
}

func (in *OperatorVersionList) Hub() {}

// OperatorVersionSpec defines the desired state of OperatorVersion.
type OperatorVersionSpec struct {
	Operator   corev1.ObjectReference
	Version    string
	AppVersion string

	// Templates is a list of references to YAML templates located in the templates folder and later referenced from tasks.
	Templates map[string]string
	// List of all tasks available in this OperatorVersion.
	Tasks []Task

	Parameters v1beta1.JSON

	// Plans maps a plan name to a plan.
	Plans map[string]Plan

	// ConnectionString defines a templated string that can be used to connect to an instance of the Operator.
	ConnectionString string

	// UpgradableFrom lists all OperatorVersions that can upgrade to this OperatorVersion.
	UpgradableFrom []corev1.ObjectReference
}

// Ordering specifies how the subitems in this plan/phase should be rolled out.
type Ordering string

// Plan specifies a series of Phases that need to be completed.
type Plan struct {
	Strategy Ordering
	Phases   []Phase
}

// ParameterType specifies the type of a parameter value.
type ParameterType string

// Phase specifies a list of steps that contain Kubernetes objects.
type Phase struct {
	Name     string
	Strategy Ordering

	// Steps maps a step name to a list of templated Kubernetes objects stored as a string.
	Steps []Step
}

// Step defines a specific set of operations that occur.
type Step struct {
	Name  string
	Tasks []string
}

// Task is a global, polymorphic implementation of all publicly available tasks
type Task struct {
	Name string
	Kind string
	Spec TaskSpec
}

// TaskSpec embeds all possible task specs. This allows us to avoid writing custom un/marshallers that would only parse
// certain fields depending on the task Kind. The downside of this approach is, that embedded types can not have fields
// with the same json names as it would become ambiguous for the default parser. We might revisit this approach in the
// future should this become an issue.
type TaskSpec struct {
	ResourceTaskSpec
	DummyTaskSpec
	PipeTaskSpec
	ToggleTaskSpec
	KudoOperatorTaskSpec
}

// ResourceTaskSpec is referencing a list of resources
type ResourceTaskSpec struct {
	Resources []string
}

// ToggleTaskSpec is referencing a ResourceTaskSpec and a parameter
type ToggleTaskSpec struct {
	Parameter string
}

// DummyTaskSpec can succeed or fail on demand and is very useful for testing operators
type DummyTaskSpec struct {
	WantErr bool
	Fatal   bool
	Done    bool
}

// PipeTask specifies a task that generates files and stores them for later usage in subsequent tasks
type PipeTaskSpec struct {
	Pod  string
	Pipe []PipeSpec
}

// PipeSpec describes how a file generated by a PipeTask is stored and referenced
type PipeSpec struct {
	File    string
	EnvFile string
	Kind    string
	Key     string
}

// KudoOperatorSpec specifies how a KUDO operator is installed
type KudoOperatorTaskSpec struct {
	// either repo package name, local package folder or an URL to package tarball. during operator installation,
	// kudoctl will resolve the package and override this field with the resolved operator name.
	Package      string
	InstanceName string
	// a specific app version in the official repo, defaults to the most recent
	AppVersion string
	// a specific operator version in the official repo, defaults to the most recent one
	OperatorVersion string
	// name of the template file (located in the `templates` folder) from which the *parent* instance
	// generates a parameter file used to populate the *child* Instance.Spec.Parameters
	ParameterFile string
}

// OperatorVersionStatus defines the observed state of OperatorVersion.
type OperatorVersionStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}
