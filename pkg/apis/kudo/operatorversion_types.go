/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package kudo

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// OperatorVersionSpec defines the desired state of OperatorVersion.
type OperatorVersionSpec struct {
	// +optional
	Operator   corev1.ObjectReference
	Version    string
	AppVersion string

	// Yaml captures a templated yaml list of elements that define the application operator instance.
	Templates map[string]string
	Tasks     []Task

	Parameters []Parameter

	// Plans maps a plan name to a plan.
	Plans map[string]Plan

	// ConnectionString defines a templated string that can be used to connect to an instance of the Operator.
	// +optional
	ConnectionString string

	// Dependencies a list of all dependencies of the operator.
	Dependencies []OperatorDependency

	// UpgradableFrom lists all OperatorVersions that can upgrade to this OperatorVersion.
	UpgradableFrom []OperatorVersion
}

// Ordering specifies how the subitems in this plan/phase should be rolled out.
type Ordering string

const (
	// Serial specifies that the plans or objects should be created in order. The first should be healthy before
	// continuing on.
	Serial Ordering = "serial"

	// Parallel specifies that the plan or objects in the phase can all be launched at the same time.
	Parallel Ordering = "parallel"
)

// Plan specifies a series of Phases that need to be completed.
type Plan struct {
	Strategy Ordering
	// Phases maps a phase name to a Phase object.
	Phases []Phase
}

// Parameter captures the variability of an OperatorVersion being instantiated in an instance.
type Parameter struct {
	// DisplayName can be used by UI's.
	DisplayName string

	// Name is the string that should be used in the templated file for example,
	// if `name: COUNT` then using the variable in a spec like:
	//
	// spec:
	//   replicas:  {{COUNT}}
	Name string

	// Description captures a longer description of how the parameter will be used.
	Description string

	// Required specifies if the parameter is required to be provided by all instances, or whether a default can suffice.
	Required *bool

	// Default is a default value if no parameter is provided by the instance.
	Default *string

	// Trigger identifies the plan that gets executed when this parameter changes in the Instance object.
	// Default is `update` if a plan with that name exists, otherwise it's `deploy`
	Trigger string
}

// Phase specifies a list of steps that contain Kubernetes objects.
type Phase struct {
	Name     string
	Strategy Ordering

	// Steps maps a step name to a list of templated Kubernetes objects stored as a string.
	Steps []Step
}

// Step defines a specific set of operations that occur.
type Step struct {
	Name  string
	Tasks []string
}

// Task is a global, polymorphic implementation of all publicly available tasks
type Task struct {
	Name string
	Kind string
	Spec TaskSpec
}

// TaskSpec embeds all possible task specs. This allows us to avoid writing custom un/marshallers that would only parse
// certain fields depending on the task Kind. The downside of this approach is, that embedded types can not have fields
// with the same json names as it would become ambiguous for the default parser. We might revisit this approach in the
// future should this become an issue.
type TaskSpec struct {
	ResourceTaskSpec
	DummyTaskSpec
	PipeTaskSpec
}

// ResourceTaskSpec is referencing a list of resources
type ResourceTaskSpec struct {
	Resources []string
}

// DummyTaskSpec can succeed of fail on demand and is very useful for testing operators
type DummyTaskSpec struct {
	WantErr bool
	Fatal   bool
	Done    bool
}

// PipeTask specifies a task that generates files and stores them for later usage in subsequent tasks
type PipeTaskSpec struct {
	Pod  string
	Pipe []PipeSpec
}

// PipeSpec describes how a file generated by a PipeTask is stored and referenced
type PipeSpec struct {
	File string
	Kind string
	Key  string
}

// OperatorVersionStatus defines the observed state of OperatorVersion.
type OperatorVersionStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type OperatorVersion struct {
	metav1.TypeMeta
	metav1.ObjectMeta

	Spec   OperatorVersionSpec
	Status OperatorVersionStatus
}

// OperatorVersionList contains a list of OperatorVersion.
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type OperatorVersionList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []OperatorVersion
}

// OperatorDependency references a defined operator.
type OperatorDependency struct {
	// Name specifies the name of the dependency. Referenced via defaults.config.
	ReferenceName string
	corev1.ObjectReference

	// Version captures the requirements for what versions of the above object
	// are allowed.
	//
	// Example: ^3.1.4
	Version string
}
